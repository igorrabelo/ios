enum BankOperation {
    case withdrawl(value: Double)
    case deposit(from: String, value: Double)
}

protocol BankAccountProtocol {
    // Initializers
    init(number: String, holder: String)
    
    // Properties
    var balance: Double { get }
    var statement: [BankOperation] { get }
    
    //Methods
    func withdrawl(value: Double) throws
    func deposit(value: Double, from account: String)
    func formattedStatement() -> String
}

enum BankAccountError: Error {
    case insuficientFunds(currentBalance: Double)
}

class MyBank: BankAccountProtocol {
    private let number: String
    private let holder: String
    private(set) var balance: Double
    private(set) var statement: [BankOperation]
    
    required init(number: String, holder: String){
        self.number = number
        self.holder = holder
        self.balance = 0.0
        self.statement = []
    }
    
    func withdrawl(value: Double) throws {
        guard value <= self.balance else {
            throw BankAccountError.insuficientFunds(currentBalance: self.balance)
        }
        
        self.balance = self.balance - value
        statement.append(.withdrawl(value: value))
    }
    func deposit(value: Double, from account: String) {
        self.balance = self.balance + value
        statement.append(.deposit(from: account, value: value))
    }
    func formattedStatement() -> String {
        
        var extrato = ""
        
        
        extrato = "OPERATION      VALUE      FROM\n"
        
        for operation in statement {
            switch operation {
            case .withdrawl(let value):
                extrato += "WDT            \(value)      \n"
            case .deposit(let from, let value):
                extrato += "DEP            \(value)      \(from)\n"
            }
        }
        extrato += "Saldo \(self.balance) "
        return(extrato)
    }

}

let conta = MyBank(number: "000001", holder: "IGOR  ")

conta.deposit(value: 50, from: "12345")
conta.deposit(value: 20, from: "54321")
try conta.withdrawl(value: 10)
print(conta.formattedStatement())
